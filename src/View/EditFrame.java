/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.PullData;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author xTuska
 */
public class EditFrame extends javax.swing.JFrame {

    /**
     * Creates new form EditForm
     */
    public EditFrame() 
    {
        dtm = new DefaultTableModel();
        this.setLocationRelativeTo(null);
        this.setVisible(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTittle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        btnExit = new javax.swing.JButton();
        tbnEdit = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTittle.setText("jLabel1");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tblInfo.setRowSelectionAllowed(false);
        tblInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInfo);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        tbnEdit.setText("Edit");
        tbnEdit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tbnEditItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTittle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tbnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTittle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(tbnEdit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if(checkCells(true))
        {
            this.setVisible(false);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "All cells must be filled.");
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void tbnEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tbnEditItemStateChanged
        //retrieve current table data
        Object[] columnNames = {dtm.getColumnName(0),dtm.getColumnName(1),dtm.getColumnName(2),dtm.getColumnName(3),dtm.getColumnName(4)};
        Object[][] cellData = new Object[dtm.getRowCount()][dtm.getColumnCount()];
        for(int row = 0; row < dtm.getRowCount(); ++row)
        {
            for(int column = 0; column < dtm.getColumnCount(); ++column)
            {
                cellData[row][column] = dtm.getValueAt(row, column);
            }
        }
        
        if(tblInfo.getModel().isCellEditable(tblInfo.getModel().getRowCount(), tblInfo.getModel().getColumnCount()) && checkCells(true)) //if its ediitable, set to non-editable
        {    
            //sets all cells to non-editable
            dtm = new DefaultTableModel(cellData, columnNames){
                @Override
                public boolean isCellEditable(int row, int column) {
                return false;
                }
                };
            tblInfo.setModel(dtm);
        }
        else if (!tblInfo.getModel().isCellEditable(tblInfo.getModel().getRowCount(), tblInfo.getModel().getColumnCount()) && checkCells(true))
        {
            dtm = new DefaultTableModel(cellData, columnNames);
            tblInfo.setModel(dtm);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "All cells must be filled.");
        }
        addEmptyRow();
    }//GEN-LAST:event_tbnEditItemStateChanged

    private void tblInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInfoMouseClicked
        addEmptyRow();
    }//GEN-LAST:event_tblInfoMouseClicked

    public void updateTitle(String title)
    {
        lblTittle.setText(title);
    }
    
    public String getTableTitle()
    {
        return lblTittle.getText();
    }
    
    //needs String array containing all column names
    public void updateColumnNames(String[] columnNames)
    {
        //by default, cant edit any cells unless you toggle edit button
        dtm = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                return false;
                }
                };
            tblInfo.setModel(dtm);
        for(int x = 0; x < columnNames.length; ++x)
        {
            dtm.addColumn(columnNames[x]);
        }
        tblInfo.setModel(dtm);
    }
    
    //each element in array has to match to correct column
    public void addRow(String[] info)
    {
        dtm.addRow(info);
    }
    
    public ArrayList<ArrayList<String>> getInfo()
    {
        ArrayList<ArrayList<String>> table = new ArrayList<>();
        for(int x = 0; x < tblInfo.getModel().getRowCount(); ++x)
        {
            table.add(getRow(x));
        }
        return table;
    }
    
    private ArrayList<String> getRow(int index)
    {
        int emptyCellCount = 0; //check if row is empty
        for(int column = 0; column < dtm.getColumnCount(); ++column)
        {
            if(tblInfo.getModel().getValueAt(index, column) == null) //if cell is empty
            {
                emptyCellCount++;
            }
        }
        if(emptyCellCount == 5) //ignore empty rows
        {
            return null;
        }
        else
        {
            ArrayList<String> row = new ArrayList<>();
            row.add((String)tblInfo.getModel().getValueAt(index, 0));
            row.add((String)tblInfo.getModel().getValueAt(index, 1));
            row.add((String)tblInfo.getModel().getValueAt(index, 2));
            row.add((String)tblInfo.getModel().getValueAt(index, 3));
            row.add((String)tblInfo.getModel().getValueAt(index, 4));
            return row;
        }
    }
    
    private boolean checkCells(boolean ignoreEmptyRows)
    {
        if(ignoreEmptyRows)
        {
            boolean allCellsFilled = true;
            int emptyCellCount;
            for(int row = 0; row < dtm.getRowCount(); ++row)
            {
                emptyCellCount = 0;
                for(int column = 0; column < dtm.getColumnCount(); ++column)
                {
                    allCellsFilled = tblInfo.getModel().getValueAt(row, column) != null;
                    if(!allCellsFilled) //if a cell was empty
                    {
                        emptyCellCount++;
                        if(emptyCellCount == 5) //the row was empty
                        {
                            allCellsFilled = true; //empty rows are ignored
                        }
                    }
                }
            }
            return allCellsFilled;
        }
        else
        {
            boolean allCellsFilled = true;
            for(int row = 0; row < dtm.getRowCount(); ++row)
            {
                for(int column = 0; column < dtm.getColumnCount(); ++column)
                {
                    allCellsFilled = tblInfo.getModel().getValueAt(row, column) != null;
                }
            }
            return allCellsFilled;
        }
    }
    
    private void addEmptyRow() //adds an empty row if needed
    {
        Object[] o = {null, null, null, null, null};
        if(dtm.getRowCount() == 0)
        {
            dtm.addRow(o);
        }
        if(checkCells(false)) //if there is an empty row, user can use that instead of adding more
        {
            dtm.addRow(o);
        }
    }
    
    private DefaultTableModel dtm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JTable tblInfo;
    private javax.swing.JToggleButton tbnEdit;
    // End of variables declaration//GEN-END:variables
}